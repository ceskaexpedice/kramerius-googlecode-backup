#summary Programers support documents
<wiki:toc max_depth="1" />

=About=
Článek popisuje možnosti definice procesů v systému K4.

==Procesy==
Procesy v systému K4 jsou definovány dvojí, jednodužší bez uživatelského vstupu a složitější, s možností definice spouštěných parametrů přes 
webové rozhraní.
 

==Procesy bez uživatelského vstupu==
Základní procesy v K4 jsou jednoduché java programy se standardní metodou main. Vytvoření takového procesu spočívá ve vytvoření třídy a zavedení 
příslušného elementu do souboru lp.xml. 
{{{
package org.someorg;

public class TestSimpleProcess {
    
    public static main(String[] args) {
        ....
    }
} 
}}}
{{{
<processes>
    <process>
        <id>testsimpleprocess</id>
        <description>Testik process</description>
        <mainClass>org.someorg.TestSimpleProcess</mainClass>
        <standardOs>lrOut</standardOs>
        <errOs>lrErr</errOs>
    </process>
</processes>
}}}

Takto definovaný proces je možno rovnou spustit přes [RESTAPI] nebo pomocí staršího přístupu, přes lr servlet [MenuAdministrace#Manipulace_s_procesy]. 

==Procesy s uživatelským vstupem==
Tato možnost byla přidána až v souvislosti s Issue 114 a je přítomna od verze 4.6. Spouštěná metoda je zde určena anotací 
`Process` a parametry metody anotacemi `ParameterName` z balíčku `cz.incad.kramerius.processes.annotations`. 

{{{
package org.someorg;

public class TestSimpleProcess2 {

    @DefaultParameterValue("user")
    public static final String DEFAULT_USER="pan_nikdo";
    
    
    @Process    
    public static void process(@ParamName("user")String user, @ParamName("email")String email, @ParamName("serverFolder")File serverFolder) {
        ...
    }
} 
}}}

Anotace `@Process` určí metodu, kterou plánovač spustí, anotace `@ParamName` definuje formální jméno položky získané z formuláře od uživatele. 
Pokud taková položka nebyla od uživatele získána, algoritmus zkoumá jestli není definována implicitní hodnota určená parametrem `@DefaultParameterValue`. 
Parametry metody musí být typu `java.lang.String` nebo typu, který má definovaný konstruktor s jedním parametrem typu `java.lang.String`. Příkladem může být
`java.io.File`.

==Uživateslký vstup ProcessInputTemplate==
Pokud má proces definovanou tzv. vstupní šablonu, znamená to, že očekává pojmenované parametry, většinou získané od uživatele přes webové rozhraní. 
Vstupní šablona určena implementací třídy `ProcessInputTemplate` z balíčku `cz.incad.kramerius.processes.template`.  Definice takového procesu v lp.xml  
vypadá
<code language="xml">
<processes>
    <process>
        <id>testsimpleprocess2</id>
        <description>Testik process</description>
        <mainClass>org.someorg.TestSimpleProcess2</mainClass>
        <standardOs>lrOut</standardOs>
        <errOs>lrErr</errOs>
        <templates>
            <input class="org.someorg.TestSimpleProcess2InputTemplate"></input>
        </templates>
    </process>
</processes>
</code>
Server při dotazu na vstupní formulář instanciuje třídu `TestSimpleProcess2InputTemplate` a zavolá na ni metodu `renderInput`, která má na startosti 
generování vstupního formuláře. Uživateli se formulář objeví v samostatném dialogu.  Příklad takového dialogu je vidět zde [Replikace#Gui].

==Implicitní šablona==
Pro procesy je definována třída `DefaultTemplate` z balíčku  `cz.incad.kramerius.processes.def`. Ta umí vygenerovat formulář pro všechny anotované paramtery
anotací  `@ParamName`.

==Výstup, šablona ProcessOutputTemplate==
Pokud je záhodno aby proces zobrazil výsledek jiným způsobem než standardně (tedy ve formě logu), je možno definovat výstupní šablonu. Ta je určena implementací
rozhraní `ProcessOutputTemplate` z balíčku `cz.incad.kramerius.processes.def`. Výstupních šablon může být u procesu víc, zobrazení nabídky výstupních šablon je vidět 
zde  [Replikace#Gui]