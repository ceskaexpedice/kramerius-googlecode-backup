#summary REST API
<wiki:toc max_depth="1" />


=REST API=
Verze 4.6 přináší možnost využít RESTful API a to ve dvou oblastech:

 * Správa procesů
 * Replikace

API je namapováno na kontext ../search/api/ a využívá autentizační mechanismus systému K4, který umožňuje autentizaci pomocí 
atributu  HTTP dotazu. Nutno podotknout, že je vhodné tuto autentizaci používat pouze v kombinaci se zapnutým HTTPS protokolem. 


==Správa procesů==
Správa procesů umožňuje základní operace 

 * Plánovat nový proces
 * Získávat informace o procesu (Stav, čas spuštění, dávkový stav..) 
 * Zastavit proces
 * Smazat proces z procesní databáze
 * Získat logy procesů
 * Získávat filtrované a tříděné seznamy procesů

===Plánování nového procesu===
Plánování procesu bez parametrů
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/plainStart/mock?userName=xxx&pswd=xxx    
}}}

Server odpoví JSON strukturou, která popisuje právě provedenou operaci. 
{{{
{
    "uuid":"40834abb-d51d-44ed-92dc-651da734b14e",
    "def":"mock",
    "state":"PLANNED",
    "batchState":"NO_BATCH",
    "started":"01/01/1970 01:00:00:000",
    "planned":"09/07/2012 07:04:45:952",
    "finished":"01/01/1970 01:00:00:000"
}
}}}
Pokud se jedná o proces, který vyžaduje parametry, je možné je předat HTTP atributem params. 
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/plainStart/mock?params={first;second;third}    
}}}
Parametry je nutno předávat ve struktuře, která se dá nejlépe vystihnout následující zjednodušeným pravidlem
{{{
    params : '{' item ( ';' item)* '}'
}}}
V uvozujících složených závorkách jsou definovány jednotlivé parametry oddělené znakem ';'

Server odpoví stejně jako v předchozím případě.


===Plánování nového procesu s pojmenovanými parametry===
Plánování procesu s pojmenovanými parametry viz [http://code.google.com/p/kramerius/wiki/Processes#Procesy_s_uživatelským_vstupem Procesy s uživatelským vstupem]
{{{
    GET https://.../seach/api/parametrizedStart/testsimpleprocess2?paramsMapping={user=strycek;email=strycek@sit.net;serverFolder=/dev/null}    
}}}
Struktura definující mapování mezi formálním jménem parametru a jeho hodnotou je podobná té předchozí. Zjednodušeně lze napsat
{{{
    params : '{' mapping ( ';' mapping )* '}'
    mapping :  name  '=' value
}}}
Kde params reprezentuje seznam jednotlivých mapovaní. Mapování je dvojice klíč a hodnota. 


===Zastavení procesu===
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/stop/9e3195af-a70b-4756-8af6-19a269eab064
}}}
Po úspěšném zastavení procesu server odpoví následovně
{{{
{
    "uuid":"9e3195af-a70b-4756-8af6-19a269eab064",
    "pid":"21155",
    "def":"mock",
    "state":"KILLED",
    "batchState":"NO_BATCH",
    "name":"Jmeno procesu mock..",
    "started":"09/07/2012 07:24:35:066",
    "planned":"09/07/2012 07:24:31:087",
    "finished":"09/07/2012 07:41:07:928",
    "userid":"krameriusAdmin",
    "userFirstname":"kramerius",
    "userSurname":"admin"
}
}}}

===Získání informace o procesu===
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/desc/9e3195af-a70b-4756-8af6-19a269eab064
}}}
Odpověd ze serveru bude podobná jako v předchozím případě.

===Smazání procesu===
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/delete/9e3195af-a70b-4756-8af6-19a269eab064
}}}
Odpověd ze serveru bude bude JSON objekt obsahující pouze informaci o smazání daného procesu.
{{{
{"deleted":"9e3195af-a70b-4756-8af6-19a269eab064"}
}}}

===Výpis procesů===
Nejednodušší případ je prostý výpis procesů (bez použitého filtru).
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/list
}}}

Výstupem je pole json popisných objektů stejných jako v přechozích případech
{{{

[
    {
        "uuid":"90b8a07a-14f5-4817-a47f-16f2b88c2724",
        "pid":"20227",
        "def":"mock",
        "state":"FINISHED",
        "batchState":"NO_BATCH",
        "name":"Jmeno procesu mock..",
        "started":"02/07/2012 09:15:31:600",
        "planned":"02/07/2012 09:15:23:570",
        "finished":"01/01/1970 01:00:00:000",
        "userid":"krameriusAdmin",
        "userFirstname":"kramerius",
        "userSurname":"admin"
    },
    {
        "uuid":"ed38ac05-a90e-41b5-b922-31b7b7fa44e6",
        "pid":"17900",
        "def":"replikator_periodicals",
        "state":"FINISHED",
        "batchState":"NO_BATCH",
        ...
    }
]
}}}

Výpis je omezen maximálním počtem záznamů. Následující záznamy je možné získat atributem offset.
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/list?offset=50
}}}
Atributem filter je možné data filtrovat. Pravidla pro filtr jde napsat následovně:
{{{
    filter : '{' filtercond ( ';' filtercond )* '}'
    filtercond : '{' key '=' value || value '=' key '}'
    key : .+                                   
    value : '.+'                               
}}}

Tečka v pravidlech reprezentuje jakýkoliv znak. Pravidlo *key* reprezentuje klíčovou položku z JSON objektu. Pravidlo *value* pak filtrovanou hodnotu. Znaky 
`';',':', '|','\'` musí být uvozny escape sekvencí následujícím způsobem  `'\;', '\:', '\|', '\\'`.
 
====Příklad filtru pro stav FINISHED====
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/list?filter={{state='FINISHED'}} 
}}}

====Filtrování procesu dle uuid====
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/list?filter={{uuid='e8259955-fe77-4a83-8f5a-7fc1a2eb57f6'}} 
}}}

====Filtrování procesů dle data====
{{{
    http://xxx.xxx.xxx.xxx/search/api/processes/list?filter={{planned>'01/01/1970 01\:00\:00\:000'}}
}}}

====Časový interval====
{{{
    http://.../list?filter={{planned>'01/01/1970 01\:00\:00\:000'};{planned<'05/01/2012 01\:00\:00\:000'}}
}}}

Jednotlivé podmínky v dotazu jsou spojeny operátorem *AND*


====Výstupy procesu====
Výstup procesu jsou dostupné pomocí dotazu
{{{
    http://xxx.xxx.xxx.xxx/search/api/processes/logs/9e3195af-a70b-4756-8af6-19a269eab064
}}}

Odpověď vypadá následovně:

{{{
{"sout":"NS42LjIwMTIgMTA6MjI6NTQgY...","serr":""}
}}}
Klíč sout reprezentuje standardní výstup zakódovaný do base64, klíč serr pak error výstup rovněž kódovaný do base64.

==Replikace==

Rozhraní pro replikace umožňuje tři operace

  * Získání seznamu všech objektů zahrnutých do replikace
  * Získání deskriptoru objektu
  * Získání FOXML dat
  
===Získání seznamu všech objektů zahrnutých do replikace===
Pomocí dotazu   
{{{
    http://xxx.xxx.xxx.xxx/search/api/replication/uuid:1a43499e-c953-11df-84b1-001b63bd97ba/prepare
}}}

Vrací JSON pole obsahující nutné objekty k replikaci. Výstup vypadá následovně:
{{{
{
    'pids':
        [
         'uuid:1a43499e-c953-11df-84b1-001b63bd97ba',
         'uuid:1a587f4f-c953-11df-84b1-001b63bd97ba',
         'uuid:1bc88a10-c953-11df-84b1-001b63bd97ba',
         'uuid:1ca1ac01-c953-11df-84b1-001b63bd97ba',
         'uuid:1d6941c2-c953-11df-84b1-001b63bd97ba',
         'uuid:1e0ad8f3-c953-11df-84b1-001b63bd97ba',
         'uuid:1ec37a94-c953-11df-84b1-001b63bd97ba',
         'uuid:1f71bbf5-c953-11df-84b1-001b63bd97ba',
         'uuid:20299a46-c953-11df-84b1-001b63bd97ba',
         'uuid:20cf7737-c953-11df-84b1-001b63bd97ba',
         'uuid:21788878-c953-11df-84b1-001b63bd97ba',
         'uuid:221d05d9-c953-11df-84b1-001b63bd97ba',
         'uuid:2309afca-c953-11df-84b1-001b63bd97ba',
         'uuid:23c4744b-c953-11df-84b1-001b63bd97ba',
         'uuid:2469b4fc-c953-11df-84b1-001b63bd97ba',
         'uuid:250f43cd-c953-11df-84b1-001b63bd97ba',
         'uuid:25c462fe-c953-11df-84b1-001b63bd97ba',
         'uuid:2669f1cf-c953-11df-84b1-001b63bd97ba',
         ....
     ]
}
}}}

===Získání deskriptoru objektu===
Lze získat pomocí
{{{
    http://xxx.xxx.xxx.xxx/search/api/replication/uuid:1a43499e-c953-11df-84b1-001b63bd97ba/description
}}}

Vrací metadata popisující daný objekt. Příklad výstupu:
{{{
{
    'identifiers':['uuid:1a43499e-c953-11df-84b1-001b63bd97ba','contract:00007'],
     'publishers':['A. Hynek',''],
     'creators':['Zola Émile'],
     'title':'Nana',
     'type':'monograph',
     'date':'',
     'handle':'http://vmkramerius:8080/search/handle/uuid:1a43499e-c953-11df-84b1-001b63bd97ba'
}
}}}

===Získání FOXML objektu===
Exportovaný FOXML objekt server poskytuje na základě dotazu 
{{{
    http://xxx.xxx.xxx.xxx/search/api/replication/uuid:1a43499e-c953-11df-84b1-001b63bd97ba/exportedFOXML
}}}

Výsledná data vypadají následovně: 
{{{
{'raw':'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGL....'} 
}}}

Kde hodnota raw v Base64 zakódovaná FOXML data.


Poznámka: Některé části API se do vydání ostré verze mohou ještě změnit.  