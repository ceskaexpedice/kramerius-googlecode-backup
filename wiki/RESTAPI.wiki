#summary REST API
<wiki:toc max_depth="1" />


=REST API=
Verze 4.6 přináší možnost využít RESTful API a to ve dvou oblastech:

 * Správa procesů
 * Replikace

API je namapováno na kontext ../search/api/ a využívá autentizační mechanismus systému K4, který umožňuje autentizaci pomocí 
atributu  HTTP dotazu. Nutno podotknout, že je vhodné tuto autentizaci používat pouze v kombinaci se zapnutým HTTPS protokolem. 


==Správa procesů==
Správa procesů umožňuje základní operace 

 * Plánovat nový proces
 * Získávat informace o procesu (Stav, čas spuštění, dávkový stav..) 
 * Zastavit proces
 * Smazat proces z procesní databáze
 * Získat logy procesů
 * Získávat filtrované a tříděné seznamy procesů

===Plánování nového procesu===
Plánování procesu bez parametrů
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/plainStart/mock?userName=xxx&pswd=xxx    
}}}

Server odpoví JSON strukturou, která popisuje právě provedenou operaci. 
{{{
{
    "uuid":"40834abb-d51d-44ed-92dc-651da734b14e",
    "def":"mock",
    "state":"PLANNED",
    "batchState":"NO_BATCH",
    "started":"01/01/1970 01:00:00:000",
    "planned":"09/07/2012 07:04:45:952",
    "finished":"01/01/1970 01:00:00:000"
}
}}}
Pokud se jedná o proces, který vyžaduje parametry, je možné je předat HTTP atributem params. 
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/plainStart/mock?params={first;second;third}    
}}}
Parametry je nutno předávat ve struktuře, která se dá nejlépe vystihnout následující zjednodušeným pravidlem
{{{
    params : '{' item ( ';' item)* '}'
}}}
V uvozujících složených závorkách jsou definovány jednotlivé parametry oddělené znakem ';'

Server odpoví stejně jako v předchozím případě.

===Zastavení procesu===
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/stop/9e3195af-a70b-4756-8af6-19a269eab064
}}}
Po úspěšném zastavení procesu server odpoví následovně
{{{
{
    "uuid":"9e3195af-a70b-4756-8af6-19a269eab064",
    "pid":"21155",
    "def":"mock",
    "state":"KILLED",
    "batchState":"NO_BATCH",
    "name":"Jmeno procesu mock..",
    "started":"09/07/2012 07:24:35:066",
    "planned":"09/07/2012 07:24:31:087",
    "finished":"09/07/2012 07:41:07:928",
    "userid":"krameriusAdmin",
    "userFirstname":"kramerius",
    "userSurname":"admin"
}
}}}

===Získání informace o procesu===
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/desc/9e3195af-a70b-4756-8af6-19a269eab064
}}}
Odpověd ze serveru bude podobná jako v předchozím případě.

===Smazání procesu===
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/delete/9e3195af-a70b-4756-8af6-19a269eab064
}}}
Odpověd ze serveru bude bude JSON objekt obsahující pouze informaci o smazání daného procesu.
{{{
{"deleted":"9e3195af-a70b-4756-8af6-19a269eab064"}
}}}

===Výpis procesů===
Nejednodušší případ je prostý výpis procesů (bez použitého filtru).
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/list
}}}
Výpis je omezen maximálním počtem záznamů. Následující záznamy je možné získat atributem offset.
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/list?offset=50
}}}
Atributem filter je možné data filtrovat. Pravidla pro filtr jde napsat následovně:
{{{
    filter : '{' filterval ( ';' filterval )* '}'
    filterval : '{' key '=' value || value '=' key '}'
    key : .+                                   
    value : '.+'                               
}}}

Tečka v pravidlech reprezentuje jakýkoliv znak. Pravidlo *key* reprezentuje klíčovou položku z JSON objektu. Pravidlo *value* pak filtrovanou hodnotu. Znaky 
`';',':', '|','\'` musí být uvozny escape sekvencí následujícím způsobem  `'\;', '\:', '\|', '\\'`.
 
===Příklad filtru pro stav failed===
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/list?filter={{state='FINISHED'}} 
}}}

===Filtrování procesu dle uuid===
{{{
    GET https://xxx.xxx.xxx.xxx/seach/api/list?filter={{uuid='e8259955-fe77-4a83-8f5a-7fc1a2eb57f6'}} 
}}}



===Výstupy procesu===

==Replikace==