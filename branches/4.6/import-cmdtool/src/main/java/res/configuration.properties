# mac address for uuid generator
uuid.mac=00:1b:63:bd:97:ba

# connection to Kramerius 3 postgresql db (replication source)
k3.db.driver=org.postgresql.Driver
k3.db.url=jdbc:postgresql://localhost:5432/kramerius
k3.db.user=kramerius
k3.db.password=f8TasR

# URL of Kramerius 3 (replication source)
k3.replication.url=http://localhost:8080/kramerius/

# replication institution (password is in the hash form)
k3.replication.sigla=ABA002
k3.replication.login=replication
k3.replication.password=f29fabe637a472bf5222b12a0bc5df77

# source directory for files for conversion and import (in Kramerius 3 format)
convert.directory=${sys:user.home}/.kramerius4/convert

# target directory for conversion
convert.target.directory=${sys:user.home}/.kramerius4/convert-converted

# source directory for files for direct import (in Kramerius 4 FOXML format)
# (instead of one directory can specify a text file containing a list of directories to import, separated by new lines)
import.directory=${sys:user.home}/.kramerius4/import




# working directory for repliaction and conversion
migration.directory=${sys:user.home}/.kramerius4/replication

#target directory for replication and conversion
migration.target.directory=${sys:user.home}/.kramerius4/replication-converted


# file containing list of periodicals IDs to replicate
migration.periodicals= ${sys:user.home}/.kramerius4/periodicals.txt

# list of monographs IDs to replicate
migration.monographs=${sys:user.home}/.kramerius4/monographs.txt

# controls if convertor K3->K4 should generate IMG_PREVIEW datastream
convert.generatePreview=true

# size of the generated preview in pixels (maximum height or width)
convert.previewSize=700

# number of characters used as contractNumber in image file names (5 at NKP, 18 at KNAV)
contractNo.length=5

#if true, convertor will create subfolder with contract name in the conversion target subfolder, the contents of the target directory is not deleted prior conversion batch
convert.useContractSubfolders=false

#used only when convert.useContractSubfolders=true. The convertor will copy the the original K3 xml file to the target subfolder
#and rename it to replication title ID (when called from Replicate process) or contract ID (when called from Convert process) with the .k3 extension
convert.copyOriginal=false

# controls how convertor K3->K4 should embed binary streams ( encoded/referenced/external)
convert.files=encoded
# controls how convertor K3->K4 should embed preview streams ( encoded/referenced/external)
convert.previews=encoded
# controls how convertor K3->K4 should embed thumbnail streams ( encoded/referenced/external)
convert.thumbnails=encoded

#controls if original image should be converted from native format to JPG (should be true if ALTO is used)
convert.originalToJPG=false

# if original K3 document references non-existing data file, conversion is terminated. If this property is set to true, only a warning is logged and conversion continues.
convert.ignoreMissingFiles=false

#default visibility of the imported documents  (false = private, true= public)
convert.defaultRights=false

# controls if convertor K3->K4 should check for PeriodicalInternalComponentPart Type="Article"
# if true, the Type attribute  is checked and if it is Article, the resulting FOXML will have model:article , otherways it will have model:internalpart
# if false, the Type attribute is never checked and the resulting FOXML will always have model:internalpart (for backwards compatibility)
convert.detectArticles=true

#ingest and indexing phases of migration processes will be skipped (set to true for testing of the conversion process without ingestion to Fedora)
ingest.skip=false

#automatically start indexer for all ingested top-level FOXML objects after import process finishes
ingest.startIndexer=true

# connection to fedora repository (replication target)
ingest.url=${fedoraHost}
ingest.user=${fedoraUser}
ingest.password=${fedoraPass}

# external configuration file name
_ext_configuration_file_name=migration.properties
